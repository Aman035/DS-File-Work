
/*****BY Aman Gupta*****/
/*Creation of Tree and traversal of node*/

#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct node
{
	int dat;
	struct node *rchild;
	struct node *lchild;
}*root=NULL;

struct nodestak
{
	struct node *data;
	struct nodestak *next;
}*top=NULL;


void push(struct node *x)
{
	struct nodestak *temp;
	temp=(struct nodestak *)malloc(sizeof(struct nodestak));
	temp->data=x;
	temp->next=top;
	top=temp;
}

struct node  *pop()
{
	struct nodestak *temp;
	temp=top;
	struct node *x=temp->data;
	top=top->next;
	free(temp);
	return x;
}

int sttop()
{
	if(top==NULL)
		return 1000000;
	else
		return top->data->dat;

}
int height(struct node *p)
{
	int x,y;
	if(p==NULL)
		return 0;
	if(p->rchild==NULL&&p->lchild==NULL)
		return 0;
	x=height(p->lchild);
	y=height(p->rchild);
	return x>y?x+1:y+1;
}

struct stnode
{
	struct node *tdata;
	struct stnode *link;
}*tops=NULL;


void pushs(struct node *p)
{
	struct stnode *t;
	t=(struct stnode*)malloc(sizeof(struct stnode));
	t->tdata=p;
	t->link=tops;
	tops=t;
}

struct node *pops()
{
	struct stnode *t=tops;
	struct node *p=tops->tdata;
	tops=tops->link;
	free(t);
	return p;
}

int isempty()
{
	if(tops==NULL)
		return 1;
	else
		return 0;
}

void inorder(struct node *p)//Iterative version
{
	while(p!=NULL||!isempty())
	{
		if(p!=NULL)
		{
			pushs(p);
			p=p->lchild;
		}
		else
		{
			p=pops();
			printf("%d ",p->dat);
			p=p->rchild;
		}
	}
}

int main()
{
	printf("Enter the no. of node u want  to enter in binary search tree\n");
	int n;
	int i=0;
	scanf("%d",&n);
	int A[n];
	printf("Enter the elements of binary search tree in preorder\n");
	for(;i<n;i++)
	{
		scanf("%d",&A[i]);
	}
	i=0;
	root=(struct node *)malloc(sizeof(struct node));
	root->dat=A[i++];
	root->rchild=root->lchild=NULL;
	struct node *p=root;
	
	while(i<n)
	{
		if(A[i]<p->dat)
		{
			struct node *t;
			t=(struct node *)malloc(sizeof(struct node));
			t->dat=A[i++];
			t->rchild=t->lchild=NULL;
			p->lchild=t;
			push(p);
			p=t;
		}
		else
		{
			if(A[i]>p->dat&&A[i]<sttop())
			{
				struct node *t;
				t=(struct node *)malloc(sizeof(struct node));
				t->dat=A[i++];
				t->rchild=t->lchild=NULL;
				p->rchild=t;
				p=t;
			}
			else
				p=pop();
		}
	}
	printf("\nHeight of tree is\n");
	printf("%d",height(root));
	printf("\nInorder traversal of tree is\n");
	inorder(root);

	return 0;
}
